{"version":3,"sources":["scripts/main.js"],"names":["BOARD_DIM","Board","Array","successfulMove","score","i","j","createRandomTile","tile","Math","floor","random","random2or4","moveSuccess","col","changedColumn","row","push","slideLeftandMerge","reverse","changedRow","toString","newRow","filter","element","length","boardCheck","moveUp","moveDown","moveRight","moveLeft","board","buttonHTML","document","querySelector","messagesHTML","getElementsByClassName","scoreHTML","firstMove","updateHTML","updateHTMLTile","getElementById","innerHTML","buttonUpdate","num","classList","value","add","messageUdate","message","noMoves","remove","isWin","addEventListener","reset","e","key"],"mappings":"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","file":"main.a328bc5c.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst BOARD_DIM = 4;\n\nclass Board extends Array {\n  constructor() {\n    super();\n    // Variable needed to check if there were any modified cells.\n    this.successfulMove = false;\n    // Variable for score\n    this.score = 0;\n\n    // Creating a matrix\n    for (let i = 0; i < BOARD_DIM; i++) {\n      this[i] = new Array(BOARD_DIM);\n    }\n  }\n\n  // Property needed to check if there are no available moves.\n  get noMoves() {\n    // Create a copy of board\n    const boardCheck = new Board();\n\n    for (let i = 0; i < BOARD_DIM; ++i) {\n      for (let j = 0; j < BOARD_DIM; ++j) {\n        boardCheck[i][j] = this[i][j];\n      }\n    }\n\n    // Check if any move is possible\n    if (!boardCheck.moveUp()\n    && !boardCheck.moveDown()\n    && !boardCheck.moveRight()\n    && !boardCheck.moveLeft()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Property needed to check if any value equals 2048.\n  get isWin() {\n    for (let i = 0; i < BOARD_DIM; ++i) {\n      for (let j = 0; j < BOARD_DIM; ++j) {\n        if (this[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // Method to reset all values to 0, reset score to 0,\n  // Additionally create 2 random values.\n  reset() {\n    for (let i = 0; i < BOARD_DIM; ++i) {\n      for (let j = 0; j < BOARD_DIM; ++j) {\n        this[i][j] = 0;\n      }\n    }\n\n    this.score = 0;\n    this.createRandomTile();\n    this.createRandomTile();\n  }\n\n  // Method to create 2 or 4 value in a random cell.\n  createRandomTile() {\n    while (true) {\n      const tile = [Math.floor(Math.random() * BOARD_DIM),\n        Math.floor(Math.random() * BOARD_DIM)];\n\n      if (this[tile[0]][tile[1]] === 0) {\n        this[tile[0]][tile[1]] = random2or4();\n        break;\n      }\n    }\n  }\n\n  // #region Move methods\n  moveDown() {\n    // Variable needed to check if there were any modified cells.\n    let moveSuccess = false;\n\n    for (let col = 0; col < BOARD_DIM; ++col) {\n      let changedColumn = [];\n\n      // Transform board column into row and slide left.\n      for (let row = 0; row < BOARD_DIM; ++row) {\n        changedColumn.push(this[row][col]);\n      }\n      // Reverse column -> slide it left -> reverse back.\n      changedColumn = this.slideLeftandMerge(changedColumn.reverse()).reverse();\n\n      // If row is changed (if there were any modified cells).\n      for (let row = 0; row < BOARD_DIM; ++row) {\n        if (changedColumn[row] !== this[row][col]) {\n          moveSuccess = true;\n        }\n        this[row][col] = changedColumn[row];\n      }\n    }\n\n    // Create random tile if there were any modified cells.\n    if (moveSuccess) {\n      this.createRandomTile();\n    }\n\n    // Return true if move was successful.\n    return moveSuccess;\n  }\n\n  moveUp() {\n    // Variable needed to check if there were any modified cells.\n    let moveSuccess = false;\n\n    for (let col = 0; col < BOARD_DIM; ++col) {\n      let changedColumn = [];\n\n      // Transform board column into row and slide left.\n      for (let row = 0; row < BOARD_DIM; ++row) {\n        changedColumn.push(this[row][col]);\n      }\n      changedColumn = this.slideLeftandMerge(changedColumn);\n\n      // If row is changed (if there were any modified cells).\n      for (let row = 0; row < BOARD_DIM; ++row) {\n        if (changedColumn[row] !== this[row][col]) {\n          moveSuccess = true;\n        }\n        this[row][col] = changedColumn[row];\n      }\n    }\n\n    // Create random tile if there were any modified cells.\n    if (moveSuccess) {\n      this.createRandomTile();\n    }\n\n    // Return true if move was successful.\n    return moveSuccess;\n  }\n\n  moveLeft() {\n    // Variable needed to check if there were any modified cells.\n    let moveSuccess = false;\n\n    for (let row = 0; row < BOARD_DIM; ++row) {\n      const changedRow = this.slideLeftandMerge(this[row]);\n\n      // If row is changed (if there were any modified cells).\n      if (changedRow.toString() !== this[row].toString()) {\n        moveSuccess = true;\n      }\n      this[row] = changedRow;\n    }\n\n    // Create random tile if there were any modified cells.\n    if (moveSuccess) {\n      this.createRandomTile();\n    }\n\n    // Return true if move was successful.\n\n    return moveSuccess;\n  }\n\n  moveRight() {\n    // Variable needed to check if there were any modified cells.\n    let moveSuccess = false;\n\n    for (let row = 0; row < BOARD_DIM; ++row) {\n      // Slide left the reversed row.\n      this[row].reverse();\n\n      const changedRow = this.slideLeftandMerge(this[row]);\n\n      // If row is changed (if there were any modified cells).\n      if (changedRow.toString() !== this[row].toString()) {\n        moveSuccess = true;\n      }\n\n      this[row] = changedRow.reverse();\n    }\n\n    // Create random tile if there were any modified cells.\n    if (moveSuccess) {\n      this.createRandomTile();\n    }\n\n    // Return true if move was successful.\n\n    return moveSuccess;\n  }\n  // #endregion\n\n  // Method to slide the row with merging equal values.\n  // Additionally increasing score.\n  slideLeftandMerge(row) {\n    // Removing all empty values.\n    let newRow = row.filter(element => element !== 0);\n\n    for (let i = 0; i < newRow.length - 1; ++i) {\n      // If two values are equal => First value * 2 and Second value = 0.\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    // Removing all empty values.\n    newRow = newRow.filter(element => element !== 0);\n\n    // Adding empty values to the end of row.\n    while (newRow.length < BOARD_DIM) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n}\n\nconst board = new Board();\nconst buttonHTML = document.querySelector('.button');\nconst messagesHTML = document.getElementsByClassName('message');\nconst scoreHTML = document.querySelector('.game-score');\nlet firstMove = false;\n\n// Reset the board and update HTML\nbuttonHTML.addEventListener('click', () => {\n  firstMove = true;\n\n  board.reset();\n  messageUdate();\n  updateHTML();\n});\n\n// Check for arrow keys.\ndocument.addEventListener('keyup', (e) => {\n  // Move board and update HTML only if not win.\n  if (!board.isWin) {\n    if (e.key === 'ArrowLeft') {\n      board.moveLeft();\n    }\n\n    if (e.key === 'ArrowRight') {\n      board.moveRight();\n    }\n\n    if (e.key === 'ArrowUp') {\n      board.moveUp();\n    }\n\n    if (e.key === 'ArrowDown') {\n      board.moveDown();\n    }\n\n    messageUdate();\n    buttonUpdate();\n    updateHTML();\n  }\n});\n\n// Updates HTML with board, score and button\nfunction updateHTML() {\n  for (let i = 0; i < BOARD_DIM; ++i) {\n    for (let j = 0; j < BOARD_DIM; ++j) {\n      updateHTMLTile(document.getElementById(`${i}x${j}`), board[i][j]);\n    }\n  }\n\n  scoreHTML.innerHTML = board.score;\n  buttonUpdate();\n}\n\n// Updates HTML cell with value\nfunction updateHTMLTile(tile, num) {\n  tile.innerHTML = '';\n  tile.classList.value = 'field-cell';\n\n  if (num > 0) {\n    tile.innerHTML = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\n// Updates HTML button\nfunction buttonUpdate() {\n  if (firstMove) {\n    buttonHTML.innerHTML = 'Restart';\n    buttonHTML.classList.value = 'button restart';\n    firstMove = false;\n  }\n}\n\n// Returns random value 2(90%) or 4(10%)\nfunction random2or4() {\n  if (Math.random() <= 0.1) {\n    return 4;\n  }\n\n  return 2;\n}\n\n// Updates message if condition is met.\nfunction messageUdate() {\n  for (const message of messagesHTML) {\n    switch (message.classList[1]) {\n      case 'message-start': {\n        if (firstMove) {\n          message.classList.add('hidden');\n        }\n        break;\n      }\n\n      case 'message-lose': {\n        if (board.noMoves) {\n          message.classList.remove('hidden');\n        }\n\n        if (firstMove) {\n          message.classList.add('hidden');\n        }\n        break;\n      }\n\n      case 'message-win': {\n        if (board.isWin) {\n          message.classList.remove('hidden');\n        }\n\n        if (firstMove) {\n          message.classList.add('hidden');\n        }\n        break;\n      }\n    }\n  }\n}\n"]}